##-Avantika Poddar-73131-##Mariam Tanzeel-61915-##Shatha Abduh-66003-##Mohammed AlZaabi-65549 import constraintdef solve(K):    #Colours represented by 1,2,3,4.....K    problem = constraint.Problem()        problem.addVariable(("G"),range(1,K+1))  #germany    problem.addVariable(("P"),range(1,K+1))  #poland    problem.addVariable(("C"),range(1,K+1))  #cxeh republic    problem.addVariable(("S"),range(1,K+1))  #solovika    problem.addVariable(("A"),range(1,K+1))  #austria    problem.addVariable(("H"),range(1,K+1))  #hungary    problem.addVariable(("N"),range(1,K+1)) #solovena    problem.addVariable(("W"),range(1,K+1)) #swizerland    problem.addVariable(("I"),range(1,K+1))  #italy    #this method is used for coloring each region so that no adjacent region have same color    def coloring(g,p,c,s,a,h,n,w,i):        if(g!=p and g!=c and g!=a and g!=w and p!=c and p!=s and c!=s and c!=a and s!=a and s!=h and a!=h and a!=n and a!=i and a!= w  and h!=n and n!= i and i!= w):            return True    problem.addConstraint(coloring,"GPCSAHNWI")    solutions = problem.getSolutions() #get the solution    return solutionsp=1 #we assume minimum number is 1, p=1while True:    if (len(solve(p))>0): #checking the moment we find a solution where some number of colours yeild a solution        break    p= p+1print("Minimum number of colours used: ", p, "and number of solutions obtained is: ",len(solve(p)))print ("One solution is:\n")print("Germany: ",solve(p)[0]['G'],'\n')print("Poland: ",solve(p)[0]['P'],'\n')print("Czech Republic: ",solve(p)[0]['C'],'\n')print("Slovakia:", solve(p)[0]['S'],'\n')print("Austria: ",solve(p)[0]['A'],'\n')print("Hungary: ",solve(p)[0]['H'],'\n')print("Solovenia: ",solve(p)[0]['N'],'\n')print("Switzerland: ",solve(p)[0]['W'],'\n')print("Italy: ",solve(p)[0]['I'],'\n')